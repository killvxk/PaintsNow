BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS `Textures` (
	`ID`	INTEGER NOT NULL UNIQUE,
	`Path`	TEXT NOT NULL,
	`Width`	INT NOT NULL,
	`Height`	INT NOT NULL,
	`Flags`	INT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`),
	PRIMARY KEY(`ID`),
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`)
);
CREATE TABLE IF NOT EXISTS `Spaces` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`Name`	TEXT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `Scenes` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`Name`	TEXT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `SceneLinkSpaces` (
	`SceneID`	INTEGER NOT NULL,
	`SpaceID`	INTEGER NOT NULL,
	`Flags`	INTEGER NOT NULL,
	FOREIGN KEY(`SpaceID`) REFERENCES `Spaces`(`ID`),
	FOREIGN KEY(`SceneID`) REFERENCES `Scenes`(`ID`),
	FOREIGN KEY(`SceneID`) REFERENCES `Scenes`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `SceneLinkEntities` (
	`SceneID`	INTEGER NOT NULL,
	`EntityID`	INTEGER NOT NULL,
	`Position`	TEXT NOT NULL,
	FOREIGN KEY(`SceneID`) REFERENCES `Scenes`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(`EntityID`) REFERENCES `Scenes`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `Resources` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`ResourceType`	INTEGER NOT NULL,
	`Notation`	TEXT,
	FOREIGN KEY(`ResourceType`) REFERENCES `ResourceTypes`(`ID`),
	FOREIGN KEY(`ResourceType`) REFERENCES `ResourceTypes`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `ResourceTypes` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`Name`	TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS `Models` (
	`ID`	INTEGER NOT NULL UNIQUE,
	`Name`	TEXT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`),
	PRIMARY KEY(`ID`),
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`)
);
CREATE TABLE IF NOT EXISTS `ModelLinkMeshes` (
	`ModelID`	INTEGER NOT NULL,
	`MeshID`	INTEGER NOT NULL,
	`MaterialID`	INTEGER NOT NULL,
	`LodStart`	REAL NOT NULL,
	`LodEnd`	REAL NOT NULL,
	FOREIGN KEY(`MaterialID`) REFERENCES `Materials`(`ID`),
	FOREIGN KEY(`MaterialID`) REFERENCES `Materials`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(`MeshID`) REFERENCES `Meshes`(`ID`),
	FOREIGN KEY(`MeshID`) REFERENCES `Meshes`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(`ModelID`) REFERENCES `Models`(`ID`),
	FOREIGN KEY(`ModelID`) REFERENCES `Models`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `Meshes` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`Path`	TEXT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`)
);
CREATE TABLE IF NOT EXISTS `Materials` (
	`ID`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	`Name`	TEXT NOT NULL,
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`)
);
CREATE TABLE IF NOT EXISTS `MaterialConfigs` (
	`MaterialID`	INTEGER NOT NULL,
	`Name`	TEXT NOT NULL,
	`Type`	INTEGER NOT NULL,
	`Value`	TEXT NOT NULL,
	`Resource`	INTEGER NOT NULL,
	FOREIGN KEY(`Type`) REFERENCES `ResourceTypes`(`ID`),
	FOREIGN KEY(`Resource`) REFERENCES `Resources`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(`MaterialID`,`Name`),
	FOREIGN KEY(`MaterialID`) REFERENCES `Materials`(`ID`),
	FOREIGN KEY(`MaterialID`) REFERENCES `Materials`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `EntityLinkComponents` (
	`EntityID`	INTEGER NOT NULL,
	`ComponentID`	INTEGER NOT NULL,
	FOREIGN KEY(`ComponentID`) REFERENCES `Components`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(`EntityID`,`ComponentID`),
	FOREIGN KEY(`EntityID`) REFERENCES `Entities`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `Entities` (
	`ID`	INTEGER NOT NULL UNIQUE,
	PRIMARY KEY(`ID`),
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `Components` (
	`ID`	INTEGER NOT NULL UNIQUE,
	`Class`	TEXT NOT NULL,
	PRIMARY KEY(`ID`),
	FOREIGN KEY(`ID`) REFERENCES `Resources`(`ID`) ON DELETE CASCADE ON UPDATE CASCADE
);
COMMIT;
